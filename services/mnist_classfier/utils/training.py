import streamlit as st
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import mlflow
from mlflow.tracking import MlflowClient

from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score
import os

# üåü K·∫øt n·ªëi v·ªõi DagsHub MLflow
DAGSHUB_MLFLOW_URI = "https://dagshub.com/lbnm203/Machine_Learning_UI.mlflow"
st.session_state['mlflow_url'] = DAGSHUB_MLFLOW_URI
mlflow.set_tracking_uri(DAGSHUB_MLFLOW_URI)

os.environ["MLFLOW_TRACKING_USERNAME"] = "lbnm203"
os.environ["MLFLOW_TRACKING_PASSWORD"] = "0902d781e6c2b4adcd3cbf60e0f288a8085c5aab"

# üìù Ki·ªÉm tra danh s√°ch c√°c experiment c√≥ s·∫µn
client = MlflowClient()
experiments = client.search_experiments()
experiment_name = "MNIST_Classification"

if not any(exp.name == experiment_name for exp in experiments):
    mlflow.create_experiment(experiment_name)
    st.success(f"Experiment '{experiment_name}' ƒë√£ ƒë∆∞·ª£c t·∫°o!")
else:
    st.info(f"Experiment '{experiment_name}' ƒë√£ t·ªìn t·∫°i.")

mlflow.set_experiment(experiment_name)


def train_process(X, y):
    st.write("## ‚öôÔ∏è Qu√° tr√¨nh hu·∫•n luy·ªán")

    total_samples = X.shape[0]

    # Thanh k√©o ch·ªçn s·ªë l∆∞·ª£ng ·∫£nh ƒë·ªÉ train
    num_samples = st.slider("Ch·ªçn s·ªë l∆∞·ª£ng ·∫£nh ƒë·ªÉ train:",
                            1000, total_samples, 10000)

    # Thanh k√©o ch·ªçn t·ª∑ l·ªá Train/Test
    test_size = st.slider("Ch·ªçn t·ª∑ l·ªá test:", 0.1, 0.5, 0.2)

    X_selected, y_selected = X[:num_samples], y[:num_samples]

    X_train, X_test, y_train, y_test = train_test_split(
        X_selected, y_selected, test_size=test_size, random_state=42)

    # L∆∞u v√†o session_state ƒë·ªÉ s·ª≠ d·ª•ng sau
    st.session_state["X_train"] = X_train
    st.session_state["y_train"] = y_train
    st.session_state["X_test"] = X_test
    st.session_state["y_test"] = y_test

    if "X_train" in st.session_state:
        X_train = st.session_state["X_train"]
        # st.write(X_train.dtype)
        y_train = st.session_state["y_train"]
        X_test = st.session_state["X_test"]
        y_test = st.session_state["y_test"]
    else:
        st.error("‚ö†Ô∏è Ch∆∞a c√≥ d·ªØ li·ªáu! H√£y chia d·ªØ li·ªáu tr∆∞·ªõc.")
        return

    st.write(f'Training: {X_train.shape[0]} - Testing: {y_test.shape[0]}')

    X_train = X_train.reshape(-1, 28 * 28) / 255.0
    X_test = X_test.reshape(-1, 28 * 28) / 255.0

    st.write("---")

    # üìå **Ch·ªçn m√¥ h√¨nh**
    model_choice = st.selectbox("Ch·ªçn m√¥ h√¨nh:", ["Decision Tree", "SVM"])

    if model_choice == "Decision Tree":
        st.markdown("""
        - **Tham s·ªë m√¥ h√¨nh:**  
            - **max_depth**: ƒê·ªô s√¢u t·ªëi ƒëa c·ªßa c√¢y.  
                - **Gi√° tr·ªã nh·ªè**: Tr√°nh overfitting nh∆∞ng c√≥ th·ªÉ underfitting.  
                - **Gi√° tr·ªã l·ªõn**: D·ªÖ b·ªã overfitting v√¨ kh√≥ h·ªçc ƒë∆∞·ª£c c√°c m·∫´u ph·ª©c t·∫°p trong d·ªØ li·ªáu 
        """)

        max_depth = st.slider("max_depth", 1, 20, 5)
        model = DecisionTreeClassifier(max_depth=max_depth)

    elif model_choice == "SVM":
        st.markdown("""
        - **Tham s·ªë m√¥ h√¨nh:**  
            - **C (Regularization)**: H·ªá s·ªë ƒëi·ªÅu ch·ªânh ƒë·ªô ph·∫°t l·ªói.  
                - **C nh·ªè**: M√¥ h√¨nh ƒë∆°n gi·∫£n h∆°n, ch·∫•p nh·∫≠n nhi·ªÅu l·ªói h∆°n.  
                - **C l·ªõn**: M√¥ h√¨nh c·ªë g·∫Øng ph√¢n lo·∫°i ch√≠nh x√°c m·ªçi ƒëi·ªÉm, nh∆∞ng d·ªÖ b·ªã overfitting.  
            - **Kernel**: H√†m kernel trick gi√∫p ph√¢n t√°ch d·ªØ li·ªáu phi tuy·∫øn t√≠nh b·∫±ng c√°ch √°nh x·∫° d·ªØ 
                li·ªáu v√†o kh√¥ng gian c√≥ nhi·ªÅu chi·ªÅu h∆°n.
                - Linear: M√¥ h√¨nh d√πng si√™u ph·∫≥ng tuy·∫øn t√≠nh ƒë·ªÉ ph√¢n l·ªõp.  
                - RBF: Kernel Gaussian Radial Basis Function gi√∫p ph√¢n t√°ch d·ªØ li·ªáu phi tuy·∫øn t√≠nh t·ªët h∆°n.  
                - Poly: S·ª≠ d·ª•ng ƒëa th·ª©c b·∫≠c cao ƒë·ªÉ ph√¢n l·ªõp, ph√π h·ª£p v·ªõi d·ªØ li·ªáu c√≥ m·ªëi quan h·ªá ph·ª©c t·∫°p.  
                - Sigmoid: M√¥ ph·ªèng h√†m k√≠ch ho·∫°t c·ªßa m·∫°ng n∆°-ron.
 
        """)
        C = st.slider("C (Regularization)", 0.1, 10.0, 1.0)
        kernel = st.selectbox("Kernel", ["linear", "rbf", "poly", "sigmoid"])
        model = SVC(C=C, kernel=kernel)

    if st.button("Hu·∫•n luy·ªán m√¥ h√¨nh"):
        with mlflow.start_run():
            model.fit(X_train, y_train)
            y_pred = model.predict(X_test)
            acc = accuracy_score(y_test, y_pred)
            st.success(f"ƒê·ªô ch√≠nh x√°c tr√™n Testing: {acc:.4f}")

            mlflow.log_param("model", model_choice)
            if model_choice == "Decision Tree":
                mlflow.log_param("max_depth", max_depth)
            elif model_choice == "SVM":
                mlflow.log_param("C", C)
                mlflow.log_param("kernel", kernel)

            mlflow.log_metric("accuracy", acc)
            mlflow.sklearn.log_model(model, model_choice.lower())

            st.success("L∆∞u tham s·ªë v√†o MLflow th√†nh c√¥ng!")

        if model_choice == "Decision Tree":
            depths = range(1, 21)
            accuracies = []
            for depth in depths:
                model = DecisionTreeClassifier(max_depth=max_depth)
                model.fit(X_train, y_train)
                y_temp_pred = model.predict(X_test)
                temp_acc = accuracy_score(y_test, y_temp_pred)
                accuracies.append(temp_acc)

            # st.write("ƒê·ªô ch√≠nh x√°c qua t·ª´ng ƒë·ªô s√¢u ")
            # accuracy_df = pd.DataFrame(
            #     {"ƒê·ªô s√¢u": depths, "ƒê·ªô ch√≠nh x√°c": accuracies})
            # st.line_chart(accuracy_df.set_index("ƒê·ªô s√¢u"))

        # st.success(f"‚úÖ ƒê·ªô ch√≠nh x√°c: {temp_acc:.4f}")

        # model.fit(X_train, y_train)
        # y_pred = model.predict(X_test)
        # acc = accuracy_score(y_test, y_pred)
        # st.success(f"‚úÖ ƒê·ªô ch√≠nh x√°c: {acc:.4f}")

        # L∆∞u m√¥ h√¨nh v√†o session_state d∆∞·ªõi d·∫°ng danh s√°ch n·∫øu ch∆∞a c√≥
        if "models" not in st.session_state:
            st.session_state["models"] = []

        # T·∫°o t√™n m√¥ h√¨nh d·ª±a tr√™n l·ª±a ch·ªçn m√¥ h√¨nh v√† kernel
        model_name = model_choice.lower().replace(" ", "_")
        if model_choice == "SVM":
            model_name += f"_{kernel}"

        # Ki·ªÉm tra n·∫øu t√™n m√¥ h√¨nh ƒë√£ t·ªìn t·∫°i trong session_state
        existing_model = next(
            (item for item in st.session_state["models"] if item["name"] == model_name), None)

        if existing_model:
            # T·∫°o t√™n m·ªõi v·ªõi s·ªë ƒë·∫øm ph√≠a sau
            count = 1
            new_model_name = f"{model_name}_{count}"

            # Ki·ªÉm tra t√™n m·ªõi ch∆∞a t·ªìn t·∫°i
            while any(item["name"] == new_model_name for item in st.session_state["models"]):
                count += 1
                new_model_name = f"{model_name}_{count}"

            # S·ª≠ d·ª•ng t√™n m·ªõi ƒë√£ t·∫°o
            model_name = new_model_name
            # st.warning(f"‚ö†Ô∏è M√¥ h√¨nh ƒë∆∞·ª£c l∆∞u v·ªõi t√™n l√†: {model_name}")

        # # L∆∞u m√¥ h√¨nh v√†o danh s√°ch v·ªõi t√™n m√¥ h√¨nh c·ª• th·ªÉ
        st.session_state["models"].append({"name": model_name, "model": model})
        # st.write(f"üîπ M√¥ h√¨nh ƒë√£ ƒë∆∞·ª£c l∆∞u v·ªõi t√™n: {model_name}")
        # st.write(
        #     f"T·ªïng s·ªë m√¥ h√¨nh hi·ªán t·∫°i: {len(st.session_state['models'])}")

        # # In t√™n c√°c m√¥ h√¨nh ƒë√£ l∆∞u
        # st.write("üìã Danh s√°ch c√°c m√¥ h√¨nh ƒë√£ l∆∞u:")
        model_names = [model["name"] for model in st.session_state["models"]]
        # # Hi·ªÉn th·ªã t√™n c√°c m√¥ h√¨nh trong m·ªôt d
        # st.write(", ".join(model_names))

        # st.success("L∆∞u th√†nh c√¥ng!")

        st.markdown(
            f"üîó [Truy c·∫≠p MLflow UI MNIST_Classification ƒë·ªÉ xem tham s·ªë]({st.session_state['mlflow_url']})")
