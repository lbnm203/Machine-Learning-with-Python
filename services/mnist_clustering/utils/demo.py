import streamlit as st
import numpy as np
import random
from sklearn.cluster import KMeans, DBSCAN
import matplotlib.pyplot as plt
from streamlit_drawable_canvas import st_canvas
from PIL import Image, ImageOps
from sklearn.decomposition import PCA


def preprocess_canvas_image(canvas_result):
    if canvas_result.image_data is not None:
        img = Image.fromarray(
            canvas_result.image_data[:, :, 0].astype(np.uint8))
        # Resize v√† chuy·ªÉn th√†nh grayscale
        img = img.resize((28, 28)).convert("L")
        img = np.array(img, dtype=np.float32) / 255.0  # Chu·∫©n h√≥a v·ªÅ [0, 1]
        return img.reshape(1, -1)  # Chuy·ªÉn th√†nh vector 1D
    return None


def demo_app():
    st.header("üëâ DEMO d·ª± ƒëo√°n c·ª•m")

    # Ki·ªÉm tra danh s√°ch m√¥ h√¨nh ƒë√£ hu·∫•n luy·ªán
    if "models" not in st.session_state or not st.session_state["models"]:
        st.warning("‚ö†Ô∏è Kh√¥ng c√≥ m√¥ h√¨nh n√†o ƒë∆∞·ª£c l∆∞u! H√£y hu·∫•n luy·ªán tr∆∞·ªõc.")
        return

    # L·∫•y danh s√°ch m√¥ h√¨nh ƒë√£ l∆∞u
    model_names = [model["name"] for model in st.session_state["models"]]

    # üìå Ch·ªçn m√¥ h√¨nh
    model_option = st.selectbox(" Ch·ªçn m√¥ h√¨nh ƒë·ªÉ d·ª± ƒëo√°n:", model_names)
    model = next(m["model"] for m in st.session_state["models"]
                 if m["name"] == model_option)

    with st.expander("H√¨nh ·∫£nh ph√¢n c·ª•m c·ªßa m√¥ h√¨nh"):
        # Hi·ªÉn th·ªã k·∫øt qu·∫£ ph√¢n c·ª•m
        if "cluster_fig" in st.session_state and model_option in st.session_state["cluster_fig"]:
            st.write("---")
            st.subheader("K·∫øt qu·∫£ ph√¢n c·ª•m")
            st.image(st.session_state["cluster_fig"][model_option],
                     caption=f"Ph√¢n c·ª•m v·ªõi {model_option}")

    # üÜï C·∫≠p nh·∫≠t key cho canvas khi nh·∫•n "T·∫£i l·∫°i"
    if "key_value" not in st.session_state:
        st.session_state.key_value = str(random.randint(0, 1000000))

    with st.expander("DEMO"):
        st.write("---")
        col1, col2, col3, col4 = st.columns([1, 3, 3, 1])
        with col1:
            if st.button("üé® V·∫Ω ·∫¢nh"):
                st.session_state.key_value = str(random.randint(0, 1000000))
                st.rerun()

            # ‚úçÔ∏è V·∫Ω d·ªØ li·ªáu
            canvas_result = st_canvas(
                fill_color="black",
                stroke_width=10,
                stroke_color="white",
                background_color="black",
                height=150,
                width=150,
                drawing_mode="freedraw",
                key=st.session_state.key_value,
                update_streamlit=True
            )

        if st.button("D·ª± ƒëo√°n c·ª•m"):
            with col2:
                img = preprocess_canvas_image(canvas_result)

                if img is not None:
                    st.write("#### ·∫¢nh sau x·ª≠ l√Ω ")
                    st.image(Image.fromarray((img.reshape(28, 28) * 255).astype(np.uint8)),
                             width=150)

                    if isinstance(model, KMeans):
                        predicted_cluster = model.predict(img)[0]
                        st.subheader(f"‚úÖ C·ª•m d·ª± ƒëo√°n: {predicted_cluster}")
                    elif isinstance(model, DBSCAN):
                        predicted_cluster = model.fit_predict(img)[0]
                        if predicted_cluster == -1:
                            st.subheader("‚ö†Ô∏è ƒêi·ªÉm n√†y kh√¥ng thu·ªôc c·ª•m n√†o!")
                        else:
                            st.subheader(f"‚úÖ C·ª•m d·ª± ƒëo√°n: {predicted_cluster}")
                else:
                    st.error("‚ö†Ô∏è H√£y v·∫Ω m·ªôt s·ªë tr∆∞·ªõc khi b·∫•m D·ª± ƒëo√°n!")

    # if st.button("D·ª± ƒëo√°n c·ª•m"):
    #     img = preprocess_canvas_image(canvas_result)

    #     if img is not None:
    #         X_train = st.session_state["X_train"]
    #         # Hi·ªÉn th·ªã ·∫£nh sau x·ª≠ l√Ω
    #         st.image(Image.fromarray((img.reshape(28, 28) *
    #                  255).astype(np.uint8)), caption="·∫¢nh sau x·ª≠ l√Ω", width=100)

    #         pca = PCA(n_components=2)
    #         pca.fit(X_train)
    #         img_reduced = pca.transform(
    #             img.squeeze().reshape(1, -1))  # S·ª≠a l·ªói

    #         # D·ª± ƒëo√°n v·ªõi K-Means ho·∫∑c DBSCAN
    #         if isinstance(model, KMeans):
    #             predicted_cluster = model.predict(
    #                 img_reduced)[0]  # D·ª± ƒëo√°n t·ª´ ·∫£nh ƒë√£ PCA
    #             st.subheader(f"üî¢ C·ª•m d·ª± ƒëo√°n: {predicted_cluster}")

    #         elif isinstance(model, DBSCAN):
    #             model.fit(X_train)  # Fit tr∆∞·ªõc v·ªõi t·∫≠p hu·∫•n luy·ªán
    #             predicted_cluster = model.fit_predict(img_reduced)[0]
    #             if predicted_cluster == -1:
    #                 st.subheader("‚ö†Ô∏è ƒêi·ªÉm n√†y kh√¥ng thu·ªôc c·ª•m n√†o!")
    #             else:
    #                 st.subheader(f"üî¢ C·ª•m d·ª± ƒëo√°n: {predicted_cluster}")

    #     else:
    #         st.error("‚ö†Ô∏è H√£y v·∫Ω m·ªôt s·ªë tr∆∞·ªõc khi b·∫•m D·ª± ƒëo√°n!")
