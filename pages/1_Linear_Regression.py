import streamlit as st
import pandas as pd
import numpy as np
import mlflow
import mlflow.sklearn
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.model_selection import train_test_split, cross_val_score
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import PolynomialFeatures, OneHotEncoder, StandardScaler
from sklearn.pipeline import Pipeline
from sklearn.compose import ColumnTransformer
from sklearn.impute import SimpleImputer
from sklearn.metrics import root_mean_squared_error, r2_score, accuracy_score, mean_squared_error


from services.Linear_Regression.utils.preprocess import preprocess_data
from services.Linear_Regression.utils.org_data import visualize_org_data
from services.Linear_Regression.utils.training_ln import training
from services.Linear_Regression.utils.theory_ln import theory_linear
from services.Linear_Regression.utils.demo_st import demo_app

# Kh·ªüi t·∫°o MLflow
# mlflow.set_tracking_uri("http://127.0.0.1:5000")
# # mlflow.create_experiment("Titanic_Survival_Prediction")
# mlflow.set_experiment("Titanic_Survival_Prediction")


# @st.cache_resource
def main():
    st.title("Titanic Survival Prediction with Linear Regression")

    url = "./services/TitanicRF/data/titanic.csv"
    data = pd.read_csv(url)

    data_org, data_preprocess, theory, train_process, demo = st.tabs(
        ["D·ªØ li·ªáu g·ªëc", "D·ªØ li·ªáu ƒë∆∞·ª£c ti·ªÅn x·ª≠ l√Ω", "Th√¥ng tin", "Hu·∫•n luy·ªán", "Demo"])

    with data_org:
        visualize_org_data(data)

    with data_preprocess:
        st.markdown("### ‚öôÔ∏è Qu√° tr√¨nh ti·ªÅn x·ª≠ l√Ω d·ªØ li·ªáu")
        st.markdown("""
            - X·ª≠ l√Ω c√°c gi√° tr·ªã thi·∫øu
                - **Age**: ƒêi·ªÅn gi√° tr·ªã trung b√¨nh cho c√°c gi√° tr·ªã b·ªã thi·∫øu.
                - **Fare**: ƒêi·ªÅn gi√° tr·ªã trung b√¨nh cho c√°c gi√° tr·ªã b·ªã thi·∫øu.
                - **Embarked**: ƒêi·ªÅn gi√° tr·ªã ph·ªï bi·∫øn nh·∫•t (mode) cho c√°c gi√° tr·ªã b·ªã thi·∫øu.

            - M√£ h√≥a ki·ªÉu d·ªØ li·ªáu d·∫°ng ch·ªØ v·ªÅ d·∫°ng s·ªë ƒë·ªÉ m√¥ h√¨nh c√≥ th·ªÉ x·ª≠ l√Ω:
                - **Sex**: Chuy·ªÉn ƒë·ªïi gi√° tr·ªã c·ªßa c·ªôt Sex t·ª´ d·∫°ng categorical sang d·∫°ng numerical ```(0: male, 1: female)```.
                - **Embarked**: t∆∞∆°ng t·ª± ·ªü ph·∫ßn n√†y ta s·∫Ω ti·∫øn h√†nh chuy·ªÉn c√°c gi√° tr·ªã v·ªÅ d·∫°ng numerical ```(1: S, 2: C, 3: Q)```

            - Ti·∫øn h√†nh drop 3 ƒë·∫∑c tr∆∞ng **Cabin, Ticket, Name** v√¨ sau khi th·ªëng k√™ cho th·∫•y ƒë·∫∑c tr∆∞ng **Ticket** v√† **Name** kh√¥ng ·∫£nh h∆∞·ªüng hay kh√¥ng gi√∫p √≠ch ƒë·∫øn k·∫øt qu·∫£ d·ª± ƒëo√°n,
            b·ªè qua ƒë·∫∑c tr∆∞ng **Cabin** v√¨ gi√° tr·ªã thi·∫øu chi·∫øm ƒë·∫øn ~80% (687/891)

            - Chu·∫©n h√≥a c√°c d·ªØ li·ªáu ['Age'], ['Fare'], ['Pclass'], ['SibSp'], ['Parch'] c√πng m·ªôt kho·∫£ng gi√° tr·ªã t∆∞∆°ng ·ª©ng trong t·∫≠p d·ªØ li·ªáu ƒë·ªÉ ph√π h·ª£p cho vi·ªác t√≠nh to√°n c·ªßa m√¥ h√¨nh
        """)

        X, y, preprocessor, df = preprocess_data(data)
        st.markdown("### üìù T·∫≠p d·ªØ li·ªáu sau ti·ªÅn x·ª≠ l√Ω")
        st.dataframe(df)

    with theory:
        theory_linear()

    # Chia d·ªØ li·ªáu
    with train_process:
        training(df)

    # Ph·∫ßn demo d·ª± ƒëo√°n
    with demo:
        model_type = st.selectbox("Select Model Type", [
                                  "Multiple Regression", "Polynomial Regression"])

        if model_type == "Polynomial Regression":
            degree = 2  # Define the degree variable
            model = Pipeline([
                ('preprocessor', preprocessor),
                ('poly', PolynomialFeatures(degree=degree, interaction_only=False)),
                ('regressor', LinearRegression())
            ])
        else:
            model = Pipeline([
                ('preprocessor', preprocessor),
                ('regressor', LinearRegression())
            ])

        demo_app(X, y, model, model_type)


if __name__ == "__main__":
    main()
